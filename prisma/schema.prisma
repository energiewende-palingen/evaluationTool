generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model House {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  street            String
  city              String
  houseNumber       String
  postalCode        Int
  country           String
  latitude          Float
  longitude         Float
  houseHolds        HouseHold[]
  solarPowerSystems SolarPowerSystem[]

  @@unique([street, houseNumber, postalCode, city, country])
}

model HouseHold {
  id                     String               @id @default(uuid())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  houseId                String
  name                   String?
  lastName               String?
  email                  String?
  phone                  String?
  tenant                 Boolean?
  owner                  Boolean?
  lessee                 Boolean?
  houseHoldSize          Int?
  heatedArea             Int?
  heatingSystemAge       Int?
  houseHoldInterestId    String               @unique
  houseHoldConsumptionId String               @unique
  comments               Comment[]
  consumption            HouseHoldConsumption @relation(fields: [houseHoldConsumptionId], references: [id])
  interest               HouseHoldInterest    @relation(fields: [houseHoldInterestId], references: [id])
  house                  House                @relation(fields: [houseId], references: [id])
}

model HouseHoldConsumption {
  id                            String     @id @default(uuid())
  electricityConsumption        Int?
  usesGasForHeat                Boolean?
  usesWoodForHeat               Boolean?
  usesOilForHeat                Boolean?
  usesElectricityForHeat        Boolean?
  heatConsumptionGas            Int?
  heatConsumptionWood           Int?
  heatConsumptionOil            Int?
  heatConsumptionElectricity    Int?
  otherHeatingSystem            String?
  convertToKwhWoodFactor        Float      @default(1.0)
  convertToKwhOilFactor         Float      @default(1.0)
  convertToKwhElectricityFactor Float      @default(1.0)
  houseHold                     HouseHold?
}

model HouseHoldInterest {
  id                      String     @id @default(uuid())
  overall                 Boolean    @default(false)
  electricity             Boolean    @default(false)
  heat                    Boolean    @default(false)
  participateInProduction Boolean    @default(false)
  investInCompany         Boolean    @default(false)
  provideResources        Boolean    @default(false)
  undecided               Boolean    @default(false)
  noInterest              Boolean    @default(false)
  houseHold               HouseHold?
}

model Comment {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  houseHoldId String
  comment     String
  houseHold   HouseHold @relation(fields: [houseHoldId], references: [id])
  createdBy   User      @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String
  password  String
  role      String
  comments  Comment[]
}

model SolarPowerSystem {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  houseId         String
  installed       Boolean
  azimuth         Int
  roofTilt        Int
  roofSize        Int
  installedPower  Int
  batteryCapacity Int
  house           House    @relation(fields: [houseId], references: [id])
}
